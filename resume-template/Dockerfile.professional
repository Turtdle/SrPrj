FROM nginx:alpine

# Install required packages - adding bash for better debugging
RUN apk add --update python3 py3-pip py3-flask py3-werkzeug bash

WORKDIR /app

# Create directory structure
RUN mkdir -p /app/templates /app/static/css /app/static/js /var/log

# Copy the professional template files
COPY mini_website/templates/professional.html /app/templates/
COPY mini_website/static/css/professional.css /app/static/css/

# Create a more robust startup script with proper error handling
RUN echo '#!/bin/sh \n\
# Create log directory and files\n\
mkdir -p /var/log\n\
touch /var/log/flask-app.log\n\
touch /var/log/nginx.log\n\
chmod 666 /var/log/flask-app.log /var/log/nginx.log\n\
\n\
echo "Starting Flask application..."\n\
# Start Flask app in background with output to log\n\
python3 /app/app.py > /var/log/flask-app.log 2>&1 &\n\
FLASK_PID=$!\n\
sleep 2\n\
\n\
# Check if Flask is running\n\
if ! ps -p $FLASK_PID > /dev/null; then\n\
    echo "ERROR: Flask application failed to start. See logs below:"\n\
    cat /var/log/flask-app.log\n\
    exit 1\n\
fi\n\
\n\
echo "Starting Nginx..."\n\
# Start Nginx in foreground\n\
nginx -g "daemon off;" > /var/log/nginx.log 2>&1\n\
' > /start.sh && chmod +x /start.sh

# Create Flask app for template rendering with better error handling
RUN echo "from flask import Flask, render_template, jsonify\n\
import json\n\
import datetime\n\
import os\n\
import logging\n\
import sys\n\
\n\
# Configure logging\n\
logging.basicConfig(\n\
    level=logging.DEBUG,\n\
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n\
    stream=sys.stdout\n\
)\n\
\n\
app = Flask(__name__)\n\
\n\
@app.route('/')\n\
def index():\n\
    try:\n\
        data_path = '/usr/share/nginx/html/data.json'\n\
        app.logger.info(f'Attempting to read data from {data_path}')\n\
        \n\
        if not os.path.exists(data_path):\n\
            app.logger.error(f'File not found: {data_path}')\n\
            return jsonify({'error': f'Resume data file not found at {data_path}'}), 404\n\
        \n\
        with open(data_path, 'r') as f:\n\
            resume_data = json.load(f)\n\
            app.logger.info('Resume data loaded successfully')\n\
        \n\
        app.logger.info('Rendering professional.html template')\n\
        return render_template('professional.html', resume=resume_data, now=datetime.datetime.now())\n\
    except Exception as e:\n\
        app.logger.error(f'Error rendering template: {str(e)}')\n\
        return jsonify({'error': str(e)}), 500\n\
\n\
# Add a health check endpoint\n\
@app.route('/health')\n\
def health():\n\
    return jsonify({'status': 'ok'})\n\
\n\
if __name__ == '__main__':\n\
    app.logger.info('Starting Flask application on port 5000')\n\
    app.run(host='0.0.0.0', port=5000, debug=True)\n\
" > /app/app.py

# Configure nginx to proxy requests to Flask
RUN echo 'server {\n\
    listen 80;\n\
    server_name localhost;\n\
    \n\
    location / {\n\
        proxy_pass http://localhost:5000;\n\
        proxy_set_header Host $host;\n\
        proxy_set_header X-Real-IP $remote_addr;\n\
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\
    }\n\
    \n\
    location /static/ {\n\
        alias /app/static/;\n\
    }\n\
    \n\
    location /data.json {\n\
        root /usr/share/nginx/html;\n\
    }\n\
    \n\
    # Add a direct health check endpoint\n\
    location = /nginx-health {\n\
        access_log off;\n\
        return 200 "healthy\\n";\n\
    }\n\
}' > /etc/nginx/conf.d/default.conf

# Set up log files
RUN touch /var/log/container-startup.log /var/log/container-debug.log && \
    chmod 666 /var/log/container-startup.log /var/log/container-debug.log

# Make sure HTML directory exists and is writable
RUN mkdir -p /usr/share/nginx/html && \
    chmod 755 /usr/share/nginx/html

# Create a placeholder data.json to ensure the container can start without errors
RUN echo '{"name":"Placeholder","contact":{"email":"placeholder@example.com","phone":"555-555-5555","location":"Placeholder"},"education":[{"institution":"University","degree":"Degree","graduation_date":"2023"}],"experience":[{"position":"Position","company":"Company","duration":"Duration","responsibilities":["Responsibility"]}],"skills":{"languages":["Skill"],"tools":["Tool"]}}' > /usr/share/nginx/html/data.json && \
    chmod 644 /usr/share/nginx/html/data.json

EXPOSE 80

CMD ["/start.sh"]